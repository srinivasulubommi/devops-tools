pipeline {
    agent {
        kubernetes {
            yaml """
kind: Pod
metadata:
  name: worker
spec:
  containers:
  - name: worker
    image: bharathpantala/jenkins_agent:latest
    imagePullPolicy: "IfNotPresent"
    command:
    - cat
    tty: true
    volumeMounts:
      - name: dockersock
        mountPath: "/var/run/docker.sock"
  restartPolicy: Never
  volumes:
      - name: dockersock
        hostPath:
          path: "/var/run/docker.sock"
"""
        }
    }
    environment {
        AWS_ACCOUNT_ID="944956894329"
        AWS_DEFAULT_REGION="us-east-1" 
        IMAGE_REPO_NAME="jenkins_agent"
        IMAGE_TAG="v2021.9"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        AWS_CREDS_ID = "jenkins-ecr-creds"
    }
   
    stages {
        // Building Docker images
        stage('Building Image') {
            steps{
                script {
                sh "docker build -t ${IMAGE_REPO_NAME}:${IMAGE_TAG} ./jenkins/workers"
                }
            }
        }

        stage('Logging into AWS ECR') {
            steps {
                script {
                 withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.AWS_CREDS_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                 sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                 }
                }
            }
        }   
        // Uploading Docker images into AWS ECR
        stage('Pushing to ECR') {
            steps{  
                script {
                sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
                sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }
}
